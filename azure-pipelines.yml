# AT on Demand for Windows

# Documentation used in this pipeline:
# .NET pipelines docs: 
# - Build, test, and deploy: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core
# - .NET pipelines tasks: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/
# Microsoft-hosted agents: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
# - Windows 2022 components and version options: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
# .NET Core release versions: https://github.com/dotnet/core/blob/main/release-notes/releases-index.json
# .NET Core RIDs (including x86/x64/ARM64): https://docs.microsoft.com/en-us/dotnet/core/rid-catalog

# NOTE: we name the builds using a semver-compatible scheme; with the exception of publicly-released builds, this includes the current date in the build #
# release: major.minor.patch.0
#  canary: major.minor.patch.0-canary+YYDDD.BBB (where DDD is the day of year; where BBB is the build run # within the day, starting at one)
#     dev: major.minor.patch.0-dev+YYDDD.BBB (where DDD is the day of year; where BBB is the build run # within the day, starting at one)
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
    # TODO: limit the branches that are automatically built (e.g. "canary" [main], "dev" [develop*] and release [release*], etc.)
#      - master
      - '*'

# TODO: determine when we want builds to happen (i.e. in PRs, we'd build the "dev*" releases)
pr:
  branches:
    include:
    - '*'

variables:
# Import all Amazon S3 upload credentials and settings
- group: 's3-public-bucket-upload'
# Import all the code-signing variables (from the Library)
- group: 'windows-code-sign'
- name: mainProject
  value: atod/atod.csproj
- name: setupProject
  value: AtodSetup/AtodSetup.wixproj
- name: projects
  value: |
         atod/atod.csproj
- name: buildConfiguration
  value: 'Release'
- name: versionBuildComponents
  value: '.$(Build.BuildNumber)'

stages:
  - stage: build
    jobs:
      - job: build
        pool:
          vmImage: 'windows-2022'
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET Runtime 6.0.25 (install for AuzreSignTool 4.0.1)'
          inputs:
            packageType: runtime
            version: 6.0.25
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: UseDotNet@2
          displayName: 'Use .NET SDK 8.0.100'
          inputs:
            packageType: sdk
            version: 8.0.100
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: DotNetCoreCLI@2
          displayName: 'Install AzureSignTool 4.0.1'
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install --global AzureSignTool --version 4.0.1'

        - task: DotNetCoreCLI@2
          displayName: 'Restore projects'
          inputs:
            command: restore
            projects: '$(projects)'
        
#        - task: DotNetCoreCLI@2
#          displayName: 'Build application (x86)'
#          inputs:
#            command: build
#            projects: '$(mainProject)'
#            platform: x86
#            arguments: '-c Release'

        - task: DotNetCoreCLI@2
          displayName: 'Publish application (x86)'
          inputs:
            command: publish
            publishWebProjects: false
            modifyOutputPath: false
            zipAfterPublish: false
            projects: '$(mainProject)'
            arguments: '-f net8.0-windows10.0.22621.0 -r win-x86 -c Release --self-contained true -o $(Build.SourcesDirectory)\atod\bin\x86\Release\net8.0-windows10.0.22621.0\publish\win-x86'

#        - task: PowerShell@2
#          displayName: 'Enumerate bin folder'
#          inputs:
#            targetType: inline
#            script: Get-ChildItem -Path '$(Build.SourcesDirectory)\atod\bin\*.*' -recurse -force

        - task: CmdLine@2
          displayName: 'Sign application (x86)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.SourcesDirectory)\atod\bin\x86\Release\net8.0-windows10.0.22621.0\publish\win-x86\atod.exe

        - task: DotNetCoreCLI@2
          displayName: 'Build installer (x86)'
          inputs:
            command: build
            projects: '$(setupProject)'
            arguments: '-c Release -p:BuildProjectReferences=false -p:platform=x86'

        - task: CopyFiles@2
          displayName: 'Copy installer (x86)'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)\AtodSetup\bin\x86\Release\en-US'
            Contents: AtodSetup.msi
            TargetFolder: '$(Build.ArtifactStagingDirectory)\x86'

        - task: CmdLine@2
          displayName: 'Sign installer (x86)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\x86\AtodSetup.msi

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSI for upload (x86)"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\x86\AtodSetup.msi
            artifactName: msi-x86
            artifactType: pipeline

#        - task: DotNetCoreCLI@2
#          displayName: 'Build application (x64)'
#          inputs:
#            command: build
#            projects: '$(mainProject)'
#            platform: x64
#            arguments: '-c Release'

        - task: DotNetCoreCLI@2
          displayName: 'Publish application (x64)'
          inputs:
            command: publish
            publishWebProjects: false
            modifyOutputPath: false
            zipAfterPublish: false
            projects: '$(mainProject)'
            arguments: '-f net8.0-windows10.0.22621.0 -r win-x64 -c Release --self-contained true -o $(Build.SourcesDirectory)\atod\bin\x64\Release\net8.0-windows10.0.22621.0\publish\win-x64'

        - task: CmdLine@2
          displayName: 'Sign application (x64)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.SourcesDirectory)\atod\bin\x64\Release\net8.0-windows10.0.22621.0\publish\win-x64\atod.exe

        - task: DotNetCoreCLI@2
          displayName: 'Build installer (x64)'
          inputs:
            command: build
            projects: '$(setupProject)'
            arguments: '-c Release -p:BuildProjectReferences=false -p:platform=x64'

        - task: CopyFiles@2
          displayName: 'Copy installer (x64)'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)\AtodSetup\bin\x64\Release\en-US'
            Contents: AtodSetup.msi
            TargetFolder: '$(Build.ArtifactStagingDirectory)\x64'

        - task: CmdLine@2
          displayName: 'Sign installer (x64)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\x64\AtodSetup.msi

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSI for upload (x64)"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\x64\AtodSetup.msi
            artifactName: msi-x64
            artifactType: pipeline

#        - task: DotNetCoreCLI@2
#          displayName: 'Build application (arm64)'
#          inputs:
#            command: build
#            projects: '$(mainProject)'
#            platform: arm64
#            arguments: '-c Release'

        - task: DotNetCoreCLI@2
          displayName: 'Publish application (arm64)'
          inputs:
            command: publish
            publishWebProjects: false
            modifyOutputPath: false
            zipAfterPublish: false
            projects: '$(mainProject)'
            arguments: '-f net8.0-windows10.0.22621.0 -r win-arm64 -c Release --self-contained true -o $(Build.SourcesDirectory)\atod\bin\arm64\Release\net8.0-windows10.0.22621.0\publish\win-arm64'

        - task: CmdLine@2
          displayName: 'Sign application (arm64)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.SourcesDirectory)\atod\bin\arm64\Release\net8.0-windows10.0.22621.0\publish\win-arm64\atod.exe

        - task: DotNetCoreCLI@2
          displayName: 'Build installer (arm64)'
          inputs:
            command: build
            projects: '$(setupProject)'
            arguments: '-c Release -p:BuildProjectReferences=false -p:platform=arm64'

        - task: CopyFiles@2
          displayName: 'Copy installer (arm64)'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)\AtodSetup\bin\arm64\Release\en-US'
            Contents: AtodSetup.msi
            TargetFolder: '$(Build.ArtifactStagingDirectory)\arm64'

        - task: CmdLine@2
          displayName: 'Sign installer (arm64)'
          inputs:
            script: >
              AzureSignTool sign
              -d "AT on Demand"
              -du "https://raisingthefloor.org/"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -kvt "$(SigningTenantId)"
              -tr "$(TimestampUrl2)"
              -v $(Build.ArtifactStagingDirectory)\arm64\AtodSetup.msi

        - task: PublishPipelineArtifact@1
          displayName: "Cache MSI for upload (arm64)"
          inputs:
            targetPath: $(Build.ArtifactStagingDirectory)\arm64\AtodSetup.msi
            artifactName: msi-arm64
            artifactType: pipeline

  - stage: publish
    jobs:
      - job: publish
        pool:
          vmImage: "ubuntu-22.04"
        steps:
# TODO: determine how to capture (download) the artifacts into the root folder (i.e. not "./s/")
        - task: DownloadPipelineArtifact@2
          displayName: "Capture MSI for upload (x86)"
          inputs:
            source: 'current'
            artifact: msi-x86
            path: msi-x86

        - task: DownloadPipelineArtifact@2
          displayName: "Capture MSI for upload (x64)"
          inputs:
            source: 'current'
            artifact: msi-x64
            path: msi-x64

        - task: DownloadPipelineArtifact@2
          displayName: "Capture MSI for upload (arm64)"
          inputs:
            source: 'current'
            artifact: msi-arm64
            path: msi-arm64

        - task: Bash@3
          displayName: "Upload MSIs to S3"
          env:
              AWS_ACCESS_KEY_ID: $(accessKey)
              AWS_SECRET_ACCESS_KEY: $(secretKey)
              AWS_DEFAULT_REGION: $(region)
              BUCKET: $(bucket)
          inputs:
            targetType: 'inline'
            script: |
                    # automatically exit if any command returns an error exit code
                    set -e
                    # print all commands to the terminal output
                    set -x

                    echo "detected dev build"
                    S3_BUILD_OPERATING_SYSTEM="win"
                    S3_BUILD_TYPE="dev"
                    # expire dev builds after 7 days
                    EXTRA_ARGS="--expires $(date -d '+7 days' --iso-8601=seconds)"

                    S3_PUBLISHED_HTTP_URL="https://d23vryjv7k8eyb.cloudfront.net"

                    publishInstaller() {
                      LOCAL_MSI_SOURCE="${AGENT_BUILDDIRECTORY}/${LOCAL_MSI_DIR}/${MSI_NAME_BASE}.msi"
                      S3_MSI_OBJECT_NAME="${S3_BUILD_OPERATING_SYSTEM}/${S3_BUILD_ARCHITECTURE}/${S3_BUILD_TYPE}/AtodSetup-v${VERSION}-${S3_BUILD_TYPE}-${BUILD_NUMBER}-${S3_BUILD_ARCHITECTURE}.msi"

                      # debug: output the contents of the build directory
                      ls -al ${AGENT_BUILDDIRECTORY}/${LOCAL_MSI_DIR}
                      aws s3 cp $EXTRA_ARGS "${LOCAL_MSI_SOURCE}" "s3://${BUCKET}/${S3_MSI_OBJECT_NAME}"
                    }

                    # set version (to be appended to the filenames); this is set to the semver version; the name (i.e. Build.BuildNumber) is appended as part of the filename
                    # NOTE: we are temporarily setting this to "1.1"; in the future we should retrieve this from the installer (both here and in the version components at the beginning of this script)
                    VERSION=1.1.0
                    BUILD_NUMBER=$(Build.BuildNumber)

                    echo "Upload MSI to S3 (x86)"
                    MSI_NAME_BASE="AtodSetup"
                    # NOTE: "s/" is a temporary path requirement; we may also consider calling these folders just "x86" etc.
                    LOCAL_MSI_DIR="s/msi-x86"
                    S3_BUILD_ARCHITECTURE="x86"
                    publishInstaller

                    echo "Upload MSI to S3 (x64)"
                    MSI_NAME_BASE="AtodSetup"
                    # NOTE: "s/" is a temporary path requirement; we may also consider calling these folders just "x64" etc.
                    LOCAL_MSI_DIR="s/msi-x64"
                    S3_BUILD_ARCHITECTURE="x64"
                    publishInstaller

                    echo "Upload MSI to S3 (arm64)"
                    MSI_NAME_BASE="AtodSetup"
                    # NOTE: "s/" is a temporary path requirement; we may also consider calling these folders just "arm64" etc.
                    LOCAL_MSI_DIR="s/msi-arm64"
                    S3_BUILD_ARCHITECTURE="arm64"
                    publishInstaller


